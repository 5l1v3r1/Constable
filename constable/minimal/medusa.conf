tree	"fs" clone of file by getfile getfile.filename;
primary tree "fs";
tree	"domain" of process;

space all_domains = recursive "domain";
space all_files	= recursive "/";

function log
{
	local printk buf.message=$1 + "\n";
	update buf;
}

function log_proc {
	log ("" + $1 + " pid="+process.pid+" domain="+primaryspace(process,@"domain")
		+" uid="+process.uid+" luid="+process.luid +" euid="+process.euid+" suid="+process.suid
		+" pcap="+process.pcap+" icap="+process.icap+" ecap="+process.ecap
		+" med_sact="+process.med_sact+" vs=["+spaces(process.vs)+"] vsr=["+spaces(process.vsr)+"] vsw=["+spaces(process.vsw)+"] vss=["+spaces(process.vss)+"]"
//		+" sync-trace=["+process.syscall+"]"
	);
}

all_domains symlink all_files {
        log("symlink");
        return OK;
}

all_domains fork {
        log("fork");
        return OK;
}

* getprocess {
	enter(process,@"domain/init");
        process.med_sact = 0x3fffffff;
	log_proc("getprocess");
	return OK;
}


function enter_domain
{
	enter(process,str2path("domain/"+$1));
	log_proc("enter_domain");
}

all_domains mkdir {
        log("mkdir");
        return OK;
}


function constable_init {
	enter(process,@"domain/init");
	log_proc("Constable started.");
}



function _init
{
	transparent process process;
	process.pid=constable_pid();
	log("_init ja som: "+_comm());
	if( _comm() == "test" ) {
		if( fetch process ) {
			constable_init();
			update process;
		}
		else
			log("Can't initialize constable process");
	}
}

