tree	"fs" clone of file by getfile getfile.filename;
primary tree "fs";
tree	"domain" of process;

space bin_etc;

space bin	= recursive "/bin" + recursive "/sbin"
		+ recursive "/lib" + recursive "/shlib"
		+ recursive "/boot"
		+ recursive "/usr"
		+ recursive "/opt"
		+ recursive "/home/ftp/bin"
		+ recursive "/home/ftp/lib"
		+ recursive "/home/ftp/usr"
		+ "/"
		+ "/var"
		+ "/var/spool"
		+ "/dev"
		+ recursive "/var/lib/nfs"
		+ space bin_etc
		- recursive "/usr/etc"
		- recursive "/usr/local/etc"
		- recursive "/usr/src"
		- recursive "/usr/local/src"
		+ "/services"
		;

space data	= recursive "/data"
//		+ recursive "/services"
		+ recursive "/cdrom"
		+ recursive "/mnt"
		;

space bin_etc 	= recursive "/etc";

//* getprocess {
//	enter(process,@"domain/init");
//	return OK;
//}

function enter_domain
{
	enter(process,str2path("domain/"+$1));
}

function log
{
	local printk buf.message=$1 + "\n";
	update buf;
}

function log_proc {
	log ("" + $1 + " pid="+process.pid+" domain="+primaryspace(process,@"domain")
		+" uid="+process.uid+" luid="+process.luid +" euid="+process.euid+" suid="+process.suid
		+" pcap="+process.pcap+" icap="+process.icap+" ecap="+process.ecap
		+" med_sact="+process.med_sact+" vs=["+spaces(process.vs)+"] vsr=["+spaces(process.vsr)+"] vsw=["+spaces(process.vsw)+"] vss=["+spaces(process.vss)+"]"
//		+" sync-trace=["+process.syscall+"]"
	);
}


function constable_init {
	enter(process,@"domain/init");
	log_proc("Constable started.");
}

function _init
{
	transparent process process;
	process.pid=constable_pid();
	log("_init ja som: "+_comm());
	if( _comm() == "local" ) {
		if( fetch process ) {
			constable_init();
			update process;
		}
		else
			log("Can't initialize constable process");
	}
}

