/*
 * Medusa configuration file
 * designed for Linux based on Slackware 8.1
 * (c)2.7.2002 by Marek Zelem <marek@terminus.sk>
 */

/* treba:
 *	  setuid spravit lepsie .. trebars ako setresuid s troma parametrami
 *	  luid treba inicializovat na -1 a potom s nim dobre narabat
 *	  (cisla accesstypov)
 *	  (devfs)

	* medusa/l2/kobject_process.c: process_kobj2kern() nesmie updatovat luid, ale mal by ho asi nastavit ked sa meni uid, uid.
	* medusa/l2/acctype_setresuid.c urvat tu pasaz okolo luidu.
	- syscally asi nebezia..??..!!..??..
	* medusa/l2/kobject_process.c process_kobj2kern() nastavit luid iba ak je luid==-1
	- .. v kernel/sys.c sa set_user() vola len ked sa meni uid... to je trochu blbe na luid... zatial to fixujem v konfiguraku zmenou luidu.


	? ako chranit constabla/forwarder, ked neviem ich pid.. mal by som to nejako zistit od kernelu.

	- spravit nejaku ochranu proti zacykleniu space-ov.

 */

/*
 * Basic tree definitions
 */

/ "fs" clone of file by getfile getfile.filename;
// / "proc" test_enter of process by fexec primaryspace(file,@"fs");
/ "domain" of process;

/*
 * Basic init and loging functions
 */

function log;

function constable_init;
function _init
{
	transparent process constable;
	constable.pid=constable_pid();
	log("_init ja som: "+_comm());
	if( _comm() == "local" ) {
		if( fetch constable ) {
			constable_init();
			update constable;
		}
		else
			log("Can't initialize constable process");
	}
}

function log
{
	local printk buf.message=$1 + "\n";
	update buf;
}

function log_proc {
	log ("" + $1 + " pid="+process.pid+" domain="+primaryspace(process,@"domain")
		+" uid="+process.uid+" luid="+process.luid +" euid="+process.euid
		+" med_sact="+process.med_sact+" vs=["+spaces(process.vs)+"] vsr=["+spaces(process.vsr)+"] vsw=["+spaces(process.vsw)+"] vss=["+spaces(process.vss)+"]"
//		+" sync-trace=["+process.syscall+"]"
	);
}

function log_file {
	log ("" + $1 + " inode="+file.ino+" primary="+primaryspace(file,@"fs")
		+" uid="+file.uid+" gid="+file.gid 
		+" med_oact="+file.med_oact+" vs=["+spaces(file.vs)+"]"
//		+" sync-trace=["+process.syscall+"]"
	);
}

/* set up processes which are already running before starting constable */
* getprocess {
//	enter(process,@"proc");
	enter(process,@"domain/init");
	return OK;
}

/*
 * functions
 */

function enter_domain
{
	log("enter domain "+$1+" pid="+pid+" uid="+uid);
	enter(process,str2path("domain/"+$1));
	log_proc("entered");
}

/*

   devices tty userdev etc bin medusa var home mailbox home_public web ftp temp
   data

 */

space cely_fs	recursive "/";
space all_domains recursive "domain";

space medusa	recursive "/medusa"
		+ "/etc/constable\\.conf"
		+ "/etc/medusa\\.conf" + "/etc/rbac\\.conf"
		+ "/sbin/constable"
		;

space devices	recursive "/dev"
		;
		
space tty	"/dev/[tp]ty.*" + recursive "/dev/pts" + "/dev/ptmx"
		+ "/dev/console" + "/dev/vcs.*"
		+ recursive "/dev/vc" + recursive "/dev/pty"
		+ recursive "/socket:"
		+ recursive "/pipe:"
		;

space userdev	"/dev/null","/dev/zero","/dev/random","/dev/urandom"
		;

space etc	recursive "/etc", recursive "/usr/etc"
		+ recursive "/usr/local/etc"
		+ recursive "/proc"
		+ recursive "/var/spool/atjobs"
		+ recursive "/var/spool/atspool"
		+ recursive "/var/spool/cron"
		+ recursive "/root"
		- "/proc/sys/kernel/modprobe"
		- "/etc/fstab"
		- "/etc/exports"
		- "/etc/inittab"
		- "/etc/inetd\\.conf"
		- "/etc/lilo\\.conf"
		- space medusa
		- "/etc/modules\\.conf"
		- "/etc/ld\\.so\\.cache" - "/etc/ld\\.so\\.conf"
		- recursive "/etc/rc\\.d"
		;

space bin	recursive "/bin" + recursive "/sbin"
		+ recursive "/lib" + recursive "/shlib"
		+ recursive "/boot"
		+ recursive "/usr"
		+ recursive "/opt"
		+ recursive "/home/ftp/bin"
		+ recursive "/home/ftp/lib"
		+ recursive "/home/ftp/usr"
		+ "/"
	       	+ "/dev"
		+ "/var"
		+ "/etc"
		+ "/etc/fstab"
		+ "/etc/exports"
		+ recursive "/var/lib/nfs"
		+ "/etc/inittab"
		+ "/etc/inetd\\.conf"
		+ "/etc/lilo\\.conf"
		+ "/etc/modules\\.conf"
		+ "/etc/ld\\.so\\.cache" + "/etc/ld\\.so\\.conf"
		+ recursive "/etc/rc\\.d"
		+ recursive "/var/X11R6"
		+ "/proc/sys/kernel/modprobe"
		- recursive "/usr/etc"
		- recursive "/usr/local/etc"
		- recursive "/usr/src"
		- recursive "/usr/local/src"
		- "/sbin/constable"
		;

space var	recursive "/var"
		- recursive "/var/X11R6"
		- recursive "/var/spool/mail"
		- recursive "/var/spool/atjobs"
		- recursive "/var/spool/atspool"
		- recursive "/var/spool/cron"
		- recursive "/var/lib/nfs"
		;

space home	recursive "/home"
//		- recursive "/home/marek/Marek"
		;

space mailbox	recursive "/var/spool/mail"
		+ "/home/.*/mail"
		+ "/home/.*/Mail"
		+ "/home/.*/UNSORTED_MAIL"
		;

space home_public "/home/.*"
		+ "/home/.*/\\.forward"
		+ "/home/.*/\\.mailsortrc"
		+ "/home/.*/\\.procmailrc"
		+ "/home/.*/\\.plan"
		+ "/home/.*/\\.project"
		+ "/home/.*/\\.tellrc"
		+ "/home/.*/\\.screenrc"
		+ "/home/.*/\\.terminfo"
		+ "/home/.*/bin"
		+ "/home/.*/Bin"
		;

space web	recursive "/services/web"
		+ recursive "/home/.*/web-data"
		;

space ftp	recursive "/home/ftp"
		+ recursive "/home/.*/incoming"
		+ recursive "/home/.*/Incoming"
		- recursive "/home/ftp/bin"
		- recursive "/home/ftp/lib"
		- recursive "/home/ftp/usr"
		;

space temp	recursive "/temp" + recursive "/var/tmp"
		+ recursive "/usr/tmp"
		+ "/tmp"
		+ recursive "/var/man"
		;

space data	recursive "/services"
		+ recursive "/cdrom"
		+ recursive "/mnt"
		;

/*
 * for this allow SUID
 */
space suid	"/bin/ping"
		;

/*
 * Vsetky procesy spustane z kernelu (proc/)
 * Domena init
 */

primary space init	"domain/init";

init		READ	devices,tty,userdev,bin,home,mailbox,home_public,
			web,ftp,temp,data,etc,var,
		WRITE	devices,tty,userdev,bin,home,mailbox,home_public,
			web,ftp,temp,data,etc,var,
		SEE	devices,tty,userdev,bin,home,mailbox,home_public,
			web,ftp,temp,data,etc,var,
		WRITE	all_domains,
		SEE	all_domains;

/*
 * Daemons (inetd,crond,atd,apmd)
 */
primary space daemon	"domain/daemon";

//* fexec:NOTIFY_ALLOW "/sbin/devfsd"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/inetd"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/crond"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/atd"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/apmd"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/syslogd"	{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/klogd"		{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/sbin/rpc.portmap"	{ enter_domain("daemon"); }
* fexec:NOTIFY_ALLOW "/usr/sbin/lpd"		{ enter_domain("daemon"); }

daemon		READ	devices,tty,userdev,bin,home,mailbox,home_public,
			web,ftp,temp,data,etc,var,
		WRITE	tty,userdev,temp,var,daemon,
		SEE	devices,tty,userdev,bin,home,mailbox,home_public,
			web,ftp,temp,data,etc,var,
			daemon;

/*
 * All login processes
 */

primary space login	"domain/login";

* fexec:VS_ALLOW "/bin/login" {
	if( luid!=-1 )
	{	log_proc("/bin/login DENY");
		return(DENY);
	}
}
* fexec:NOTIFY_ALLOW "/bin/login" 	{
	enter_domain("login");
	process.user|=0x01;
}

* fexec:VS_ALLOW "/usr/sbin/sshd" {
	if( luid!=-1 )
	{	log_proc("/usr/sbin/sshd DENY");
		return(DENY);
	}
}
* fexec:NOTIFY_ALLOW "/usr/sbin/sshd" 	{
	enter_domain("login");
	process.user|=0x01;
}

login		READ	tty,userdev,bin,home,temp,etc,var,
		WRITE	tty,userdev,home,temp,login,
		SEE	tty,userdev,bin,home,temp,etc,var,
			login;

/*
 * User processes
 */

primary space user	"domain/user";

login after_exec:NOTIFY_ALLOW {
	if( process.user & 0x01 )
	{	process.user&=~0x01;
		return(OK);
	}
//	log_proc("pred user");
	enter_domain("user");
//	log_proc("po   user");
}

user		READ	tty,userdev,bin,home,mailbox,temp,data,etc,var,user,
		WRITE	tty,userdev,home,mailbox,temp,user,
		SEE	tty,userdev,bin,home,mailbox,temp,data,etc,var,
			login,user;

/*
 * named
primary space named	  "domain/named"
		+ "/usr/sbin/named"
		;
procesy		ENTER named;
space named_data	recursive "/var/named";
procesy fexec named	{ xenter_domain("named"); }
named		READ	bin,named_data,
		WRITE	bin,named_data,
		ENTER	bin,named,named_data,
		SEE	bin,named,named_data;
init		WRITE	named,
		SEE	named;
named		SEE	named;
 */


* link cely_fs {
	if( luid==-1 || (vsw & space bin) )
		return(OK);
//	if( !(file.vs & space bin) ) /* ??? */
//		return(OK);
	log_proc("pokus o hard link");
	return(DENY);
}

/*
all_domains init * {
	log("nieco staruje pid="+pid+" luid="+luid);
}
*/

all_domains setresuid {
	if( luid!=-1
	     && ((setresuid.ruid>=0 && setresuid.ruid != process.luid) ||
		 (setresuid.euid>=0 && setresuid.euid != process.luid) ||
		 (setresuid.suid>=0 && setresuid.suid != process.luid)) )
	{
		log("["+pid+" luid="+luid+"] pokus o setresuid("+setresuid.ruid+","+setresuid.euid+","+setresuid.suid+");");
//		if( luid==0 )	ecap=pcap;
//		else	
			ecap=0;
		pcap=icap=ecap;
		return DENY;
	}
//	else	log("["+pid+"] setresuid("+setresuid.ruid+","+setresuid.euid+","+setresuid.suid+");");
	if( luid==-1 && setresuid.ruid==uid )	/* lebo v kerneli sa nenastavi ak sa uid nezmenil */
		luid=uid;
}

all_domains sexec * {
	return(SKIP);
}

all_domains sexec suid {
	log("sexec enabled");
	if( process.egid != sexec.gid )
	{	process.egid = sexec.gid;
		process.sgid = sexec.gid;
		process.fsgid= sexec.gid;
	}
	process.ecap = sexec.ecap - CAP_SETPCAP - CAP_SYS_MODULE - CAP_SYS_RAWIO;
	process.pcap = sexec.pcap - CAP_SETPCAP - CAP_SYS_MODULE - CAP_SYS_RAWIO;
	process.icap = sexec.icap - CAP_SETPCAP - CAP_SYS_MODULE - CAP_SYS_RAWIO;
	process.euid = sexec.uid;
	process.suid = sexec.uid;
	process.fsuid= sexec.uid;
	return(SKIP);
}


* fexec "/bin/sync" {
	log_proc("sync");
}

all_domains syscall {
	if( sysnr==sys_setuid || sysnr==sys_setreuid || sysnr==sys_setresuid || sysnr==sys_setuid32 || sysnr==sys_setreuid32 || sysnr==sys_setresuid32 )
		log ("syscall "+pid+" "+sysnr+" "+arg0+" "+arg1+" "+arg2+" "+arg3+" "+arg4);
}

/*
all_domains fork {
	log("fork begin "+pid+" "+uid+" "+process.med_sact);
}
all_domains init {
	log("start "+pid+" "+uid+" "+process.med_sact);
}
*/

function constable_init {
	enter(constable,@"domain/init");
	log("Constable started.");
}

* lookup "/etc/medusa\\.conf" {
	log_file("/etc/medusa\\.conf");
}

* lookup "/etc/fstab" {
	log_file("/etc/fstab");
}

* lookup "/etc/HOSTNAME" {
	log_file("/etc/HOSTNAME");
}

// * lookup etc {
// 	log_file("/etc/*");
// }

