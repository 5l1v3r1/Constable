
/ "fs" clone of file by getfile getfile.filename;
/ "proc" of process by fexec primaryspace(file,@"fs");
// / "domain" test_enter of process;
/ "domain" of process;

function log;

function constable_init;
function _init
{
	transparent process constable;
	constable.pid=constable_pid();
	if( "aaa" == "aaa" )
		"sss">>1;
	if( _comm() == "local" ) {
		if( fetch constable ) {
			constable_init();
			update constable;
		}
		else
			log("Can't initialize constable process");
	}
}

function log
{	local printk buf.message=$1 + "\n";
	update buf;
}

function log_proc {
	log ("" + $1 + " pid="+pid+" domain="+primaryspace(process,@"domain")
		+" uid="+uid+" luid="+luid
		+" med_sact="+process.med_sact+" vs="+vs+" vsr="+vsr+" vsw="+vsw+" vss="+vss
//		+" sync-trace=["+syscall+"]"
	);
}

* getprocess {
	enter(process,@"proc");
//	enter(process,@"domain/init");
	log("------------------- "+pid);
	return OK;
}


space processes	recursive "proc";
primary space nejaky_subor recursive "fs/";

processes READ recursive "fs";
processes WRITE recursive "fs";
processes SEE recursive "fs";

processes READ processes;
processes WRITE processes;
processes SEE processes;

processes fexec "/bin/sync" {
	log("sync "+pid);
}

processes fexec "/mnt/hda3/bin/sync" {
	log("/mnt/hda3/bin/sync "+pid);
}

processes fexec "/usr/bin/zoo" {
	log("zoo "+pid);
}

function test_force {
	local force fo;
	fo.pid=process.pid;
	log("chcel by som forsnut pidu "+fo.pid);
	if( force_code_int(fo.code,"Mlibc/f_showargs.mo",1,3,5,7) )
	{
		log("pokusam sa forsnut pidu "+fo.pid);
		update fo;
	}
}
processes fexec "/root/test" {
	test_force();
}
processes unlink "/tmp/zzz" {
	test_force();
	return SKIP;
}

function constable_init {
	log("zijem N "+constable.pid);
}

